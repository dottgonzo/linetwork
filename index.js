var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Promise = require("bluebird");
var fs = require("fs");
var _ = require("lodash");
var Providers = require("mobile-providers");
var Wpamanager = require("wpasupplicant-manager");
var hostapdswitch = require("hostapd_switch");
var testinternet = require("promise-test-connection");
var merge = require("json-add");
var LMC = require("linux-mobile-connection");
var netw = require("netw");
var verb = require("verbo");
function getinterfa(setted) {
    return new Promise(function (resolve, reject) {
        var wifi_exist = false;
        var devi;
        netw().then(function (net) {
            _.map(net.networks, function (device) {
                if (device.type == "wifi" && (!setted || setted == "auto" || setted == device.interface)) {
                    wifi_exist = device.interface;
                    devi = device;
                }
            });
            if (wifi_exist) {
                resolve(devi);
            }
            else {
                reject({ error: "device not founded" });
            }
        }).catch(function (err) {
            reject(err);
        });
    });
}
function recovery_mode(config, dev, mode) {
    var m;
    if (mode) {
        m = mode;
    }
    else {
        m = "host";
    }
    var confhapds = {
        interface: dev,
        wpasupplicant_path: config.wpasupplicant_path,
        hostapd: config.hostapd
    };
    var apswitch = new hostapdswitch(confhapds);
    return new Promise(function (resolve, reject) {
        apswitch[m]().then(function (answer) {
            verb(answer, "warn", "linetwork recovery mode");
            resolve(true);
        }).catch(function (err) {
            verb(err, "error", "linetwork recovery mode failed");
            reject(err);
        });
    });
}
;
;
;
;
var config = {
    port: 4000,
    hostapd: {
        driver: "nl80211",
        ssid: "testttap",
        wpa_passphrase: "testpass"
    },
    recovery_interface: "auto",
    wpasupplicant_path: "/etc/wpa_supplicant/wpa_supplicant.conf"
};
var LiNetwork = (function () {
    function LiNetwork(data) {
        merge(config, data);
        this.liconfig = config;
    }
    LiNetwork.prototype.mobileconnect = function () {
        return new Promise(function (resolve, reject) {
            if (this.liconfig.mobile) {
                LMC(this.liconfig.mobile.provider, this.liconfig.mobile.options).then(function (answer) {
                    resolve(answer);
                }).catch(function (err) {
                    verb(err, "error", "J5 linuxmobile");
                    reject(err);
                });
            }
            else {
                reject({ error: "no mobile configuration provided" });
            }
        });
    };
    ;
    LiNetwork.prototype.wpamanager = function () {
        return new Wpamanager(this.liconfig.wpasupplicant_path);
    };
    LiNetwork.prototype.mobileproviders = function () {
        return new Providers();
    };
    LiNetwork.prototype.wifi_switch = function (mode, dev) {
        console.log(mode, dev);
        if (dev || this.liconfig.recovery_interface != "auto") {
            if (dev) {
                var apswitch = new hostapdswitch({
                    interface: dev,
                    wpasupplicant_path: config.wpasupplicant_path,
                    hostapd: this.hostapd
                });
            }
            else {
                var apswitch = new hostapdswitch({
                    interface: this.liconfig.recovery_interface,
                    wpasupplicant_path: config.wpasupplicant_path,
                    hostapd: this.hostapd
                });
            }
            console.log("dev mode");
            return new Promise(function (resolve, reject) {
                switch (mode) {
                    case "ap":
                        apswitch.ap().then(function (answer) {
                            resolve(true);
                        }).catch(function (err) {
                            reject(err);
                        });
                        break;
                    case "host":
                        apswitch.host().then(function (answer) {
                            resolve(true);
                        }).catch(function (err) {
                            reject(err);
                        });
                        break;
                    case "client":
                        apswitch.client().then(function (answer) {
                            resolve(true);
                        }).catch(function (err) {
                            reject(err);
                        });
                        break;
                }
                ;
            });
        }
        else {
            console.log("auto mode");
            var config = this.liconfig;
            return new Promise(function (resolve, reject) {
                netw().then(function (data) {
                    console.log(data);
                    _.map(data.networks, function (device) {
                        if (device.type == "wifi") {
                            dev = device.interface;
                        }
                    });
                    if (dev) {
                        var apswitch = new hostapdswitch({
                            interface: dev,
                            hostapd: config.hostapd,
                            wpasupplicant_path: config.wpasupplicant_path
                        });
                        console.log(apswitch);
                        switch (mode) {
                            case "ap":
                                apswitch.ap().then(function (answer) {
                                    resolve(true);
                                }).catch(function (err) {
                                    reject(err);
                                });
                                break;
                            case "host":
                                apswitch.host().then(function (answer) {
                                    resolve(true);
                                }).catch(function (err) {
                                    reject(err);
                                });
                                break;
                            case "client":
                                apswitch.client().then(function (answer) {
                                    resolve(true);
                                }).catch(function (err) {
                                    reject(err);
                                });
                                break;
                        }
                    }
                    else {
                        reject({ error: "no dev" });
                    }
                }).catch(function (err) {
                    reject(err);
                });
            });
        }
    };
    ;
    LiNetwork.prototype.mproviders = function () {
        return JSON.parse(fs.readFileSync(__dirname + "/node_modules/linux-mobile-connection/node_modules/wvdialjs/providers.json", "utf-8"));
    };
    ;
    LiNetwork.prototype.connection = function (recovery) {
        var config = this.liconfig;
        return new Promise(function (resolve, reject) {
            verb(config, "debug", "Tryng to connect");
            testinternet().then(function () {
                resolve({ conection: true, recovery: false });
            }).catch(function () {
                getinterfa(config.recovery_interface).then(function (interf) {
                    var wifi_exist = interf.interface;
                    var confhapds = {
                        interface: wifi_exist,
                        wpasupplicant_path: config.wpasupplicant_path,
                        hostapd: config.hostapd
                    };
                    verb(wifi_exist, "info", "Wlan interface founded");
                    var apswitch = new hostapdswitch(confhapds, true);
                    apswitch.client(true, true).then(function (answer) {
                        resolve({ conection: true, recovery: false });
                    }).catch(function (err) {
                        if (config.mobile) {
                            LMC(config.mobile.provider, config.mobile.options).then(function (answer) {
                                resolve({ conection: true, recovery: false });
                            }).catch(function () {
                                if (recovery) {
                                    recovery_mode(config, wifi_exist).then(function (answer) {
                                        resolve({ conection: false, recovery: true });
                                    }).catch(function (err) {
                                        verb(err, "error", "J5 recovery mode start");
                                        reject(err);
                                    });
                                }
                                else {
                                    reject("no wlan host available");
                                }
                            });
                        }
                        else if (recovery) {
                            recovery_mode(config, wifi_exist).then(function (answer) {
                                resolve({ conection: false, recovery: true });
                            }).catch(function (err) {
                                verb(err, "error", "J5 recovery mode start");
                                reject(err);
                            });
                        }
                    });
                }).catch(function (err) {
                    verb("no wifi", "warn", "networker");
                    if (config.mobile) {
                        LMC(config.mobile.provider, config.mobile.options).then(function (answer) {
                            resolve({ conection: true, recovery: false });
                        }).catch(function (err) {
                            verb(err, "error", "J5 linuxmobile");
                            reject(err);
                        });
                    }
                });
            });
        });
    };
    ;
    LiNetwork.prototype.recovery = function (mode) {
        var config = this.liconfig;
        return new Promise(function (resolve, reject) {
            getinterfa(config.recovery_interface).then(function (interf) {
                var wifi_exist = interf.interface;
                recovery_mode(config, wifi_exist, mode).then(function (answer) {
                    resolve(answer);
                }).catch(function (err) {
                    reject(err);
                });
            }).catch(function (err) {
                reject(err);
            });
        });
    };
    ;
    return LiNetwork;
})();
;
module.exports = LiNetwork;

//# sourceMappingURL=data:application/json;base64,
